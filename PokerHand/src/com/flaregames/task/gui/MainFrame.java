/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.flaregames.task.gui;

import com.flaregames.task.core.Card;
import com.flaregames.task.core.Deck;
import com.flaregames.task.core.Hand;
import com.flaregames.task.core.PokerManager;
import java.awt.Color;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;

/**
 * Games main Window.
 *
 * @author mustafa
 */
public class MainFrame extends javax.swing.JFrame implements PropertyChangeListener {

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        deck = new Deck(manager.generateCards());
        poketDeck = new PokerDeck(deck);
        deckScroller.setViewportView(poketDeck);
        poketDeck.addPropertyChangeListener(PokerDeck.CARD_VALUE, MainFrame.this);
        logTable.getColumnModel().getColumn(0).setMinWidth(200);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setTitle("FlareGames PokerHand Task");
        setIconImage(new ImageIcon(getClass().getResource("flaregames.png")).getImage());
    }
    private PokerDeck poketDeck;
    private Deck deck;
    private PokerManager manager = new PokerManager();
    private int winnerIndex;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        mainP = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        playersP = new javax.swing.JPanel();
        player1P = new javax.swing.JPanel();
        player1Header = new javax.swing.JPanel();
        player1HeadL = new javax.swing.JLabel();
        player1ContentP = new javax.swing.JPanel();
        player2P = new javax.swing.JPanel();
        player2Header = new javax.swing.JPanel();
        player2HeadL = new javax.swing.JLabel();
        player2ContentP = new javax.swing.JPanel();
        logPanel = new javax.swing.JPanel();
        headerP = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        logTable = new javax.swing.JTable();
        deckP = new javax.swing.JPanel();
        deckScroller = new javax.swing.JScrollPane();
        statusP = new javax.swing.JPanel();
        statusL = new javax.swing.JLabel();
        scoreL = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        newGameMI = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        exitB = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        mainP.setLayout(new java.awt.GridBagLayout());

        jSplitPane1.setDividerLocation(500);

        playersP.setLayout(new java.awt.GridBagLayout());

        player1P.setLayout(new java.awt.GridBagLayout());

        player1Header.setBackground(new java.awt.Color(49, 69, 141));
        player1Header.setMinimumSize(new java.awt.Dimension(80, 50));
        player1Header.setPreferredSize(new java.awt.Dimension(80, 40));
        player1Header.setLayout(new java.awt.GridBagLayout());

        player1HeadL.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        player1HeadL.setForeground(new java.awt.Color(254, 254, 254));
        player1HeadL.setText("Player 1");
        player1Header.add(player1HeadL, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        player1P.add(player1Header, gridBagConstraints);

        player1ContentP.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        player1P.add(player1ContentP, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.5;
        playersP.add(player1P, gridBagConstraints);

        player2P.setLayout(new java.awt.GridBagLayout());

        player2Header.setBackground(new java.awt.Color(49, 69, 141));
        player2Header.setMinimumSize(new java.awt.Dimension(80, 17));
        player2Header.setPreferredSize(new java.awt.Dimension(80, 40));
        player2Header.setLayout(new java.awt.GridBagLayout());

        player2HeadL.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        player2HeadL.setForeground(new java.awt.Color(254, 254, 254));
        player2HeadL.setText("Player 2");
        player2Header.add(player2HeadL, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        player2P.add(player2Header, gridBagConstraints);

        player2ContentP.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        player2P.add(player2ContentP, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.5;
        playersP.add(player2P, gridBagConstraints);

        logPanel.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        logPanel.add(headerP, gridBagConstraints);

        logTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Hand", "Rank", "Value"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        logTable.setToolTipText("");
        jScrollPane1.setViewportView(logTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        logPanel.add(jScrollPane1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        playersP.add(logPanel, gridBagConstraints);

        jSplitPane1.setLeftComponent(playersP);

        deckP.setLayout(new java.awt.BorderLayout());
        deckP.add(deckScroller, java.awt.BorderLayout.CENTER);

        jSplitPane1.setRightComponent(deckP);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        mainP.add(jSplitPane1, gridBagConstraints);

        statusP.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        statusP.setLayout(new java.awt.GridBagLayout());

        statusL.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        statusP.add(statusL, gridBagConstraints);

        scoreL.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        scoreL.setText("N/A");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        statusP.add(scoreL, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        mainP.add(statusP, gridBagConstraints);

        getContentPane().add(mainP, java.awt.BorderLayout.CENTER);

        jMenu1.setText("Game");

        newGameMI.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        newGameMI.setText("New Game");
        newGameMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newGameMIActionPerformed(evt);
            }
        });
        jMenu1.add(newGameMI);
        jMenu1.add(jSeparator1);

        exitB.setBackground(new java.awt.Color(222, 35, 12));
        exitB.setText("Exit");
        exitB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitBActionPerformed(evt);
            }
        });
        jMenu1.add(exitB);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Create new game by reset values of deck / cards.
     *
     * @param evt fired by New Game button.
     */
    private void newGameMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newGameMIActionPerformed
        poketDeck.reset();
        player1Cards.clear();
        player2Cards.clear();
        updatePlayerPanels();
        flashTimer.stop();
        resetHeaders();
        statusL.setText("");
    }//GEN-LAST:event_newGameMIActionPerformed

    /**
     * Exit application .
     *
     * @param evt fired by Exit button.
     */
    private void exitBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitBActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitBActionPerformed

    private int firstPlayerScore = 0;
    private int secondPlayerScore = 0;

    /**
     * Validates which player is the winner by calling PokerManager and update
     * logTable.
     */
    private void validateResult() {
        resetHeaders();

        Hand firstPlayer = new Hand(player1Cards);
        Hand secondPlayer = new Hand(player2Cards);
        int[] result = manager.getWinner(firstPlayer, secondPlayer);
        int winner = result[0];
        int winnerRank = result[1];
        int loserRank = result[2];

        if (winner == -1) {
            winnerIndex = 2;
            statusL.setText("Player 2 Wins ! : (" + secondPlayer.getRank() + ")");
            secondPlayerScore++;
        } else if (winner == 1) {
            winnerIndex = 1;
            statusL.setText("Player 1 Wins ! : (" + firstPlayer.getRank() + ")");
            firstPlayerScore++;
        } else {
            winnerIndex = 0;
            statusL.setText("Draw !");
        }
        scoreL.setText(firstPlayerScore + " - " + secondPlayerScore);

        Vector row = new Vector();
        row.add(player1Cards.toString());
        row.add(firstPlayer.getRank());
        if (winner == 1) {
            row.add(winnerRank);
        } else {
            row.add(loserRank);
        }

        ((DefaultTableModel) logTable.getModel()).addRow(row);

        row = new Vector();
        row.add(player2Cards.toString());
        row.add(secondPlayer.getRank());
        if (winner == -1) {
            row.add(winnerRank);
        } else {
            row.add(loserRank);
        }
        ((DefaultTableModel) logTable.getModel()).addRow(row);

        flashTimer.setRepeats(true);
        flashTimer.start();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                MainFrame main = new MainFrame();
                main.setSize(Toolkit.getDefaultToolkit().getScreenSize());
                main.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                main.setVisible(true);

            }
        });
    }

    private int activePlayer = 1;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel deckP;
    private javax.swing.JScrollPane deckScroller;
    private javax.swing.JMenuItem exitB;
    private javax.swing.JPanel headerP;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JPanel logPanel;
    private javax.swing.JTable logTable;
    private javax.swing.JPanel mainP;
    private javax.swing.JMenuItem newGameMI;
    private javax.swing.JPanel player1ContentP;
    private javax.swing.JLabel player1HeadL;
    private javax.swing.JPanel player1Header;
    private javax.swing.JPanel player1P;
    private javax.swing.JPanel player2ContentP;
    private javax.swing.JLabel player2HeadL;
    private javax.swing.JPanel player2Header;
    private javax.swing.JPanel player2P;
    private javax.swing.JPanel playersP;
    private javax.swing.JLabel scoreL;
    private javax.swing.JLabel statusL;
    private javax.swing.JPanel statusP;
    // End of variables declaration//GEN-END:variables

    /**
     *
     * @param evt Property fired by PokerDeck Panel , it fire Card whenever user
     * click on specific card.
     */
    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if (player1Cards.size() <= 4) {
            player1Cards.add((Card) evt.getNewValue());
            player1Header.setBorder(BorderFactory.createLineBorder(Color.YELLOW, 3));
            player1HeadL.setForeground(Color.YELLOW);
            statusL.setText("Player 1 Hand : " + player1Cards.toString());

        } else if (player2Cards.size() <= 4) {

            player2Cards.add((Card) evt.getNewValue());
            player2Header.setBorder(BorderFactory.createLineBorder(Color.YELLOW, 3));
            player2HeadL.setForeground(Color.YELLOW);
            player1Header.setBorder(BorderFactory.createEmptyBorder());
            player1HeadL.setForeground(Color.WHITE);
            statusL.setText("Player 2 Hand : " + player2Cards.toString());
            if (player2Cards.size() == 5) {
                validateResult();
            }

        }
        updatePlayerPanels();
    }

    /**
     * Update values of each player cards after adding new card.
     */
    private void updatePlayerPanels() {
        player1ContentP.removeAll();
        player2ContentP.removeAll();
        player1ContentP.revalidate();
        player2ContentP.revalidate();
        this.revalidate();

        this.revalidate();
        for (Card card : player1Cards) {
            JLabel button = new JLabel();
            button.setName(card.getValue() + card.getSuite());
            button.setSize(71, 96);
            System.out.println("Image : " + button.getName());
            button.setIcon(new ImageIcon(getClass().getResource("/com/flaregames/task/gui/icons/" + button.getName() + ".png")));
            player1ContentP.add(button);
        }

        for (Card card : player2Cards) {
            JLabel button = new JLabel();
            button.setName(card.getValue() + card.getSuite());
            button.setSize(71, 96);
            button.setIcon(new ImageIcon(getClass().getResource("/com/flaregames/task/gui/icons/" + button.getName() + ".png")));
            player2ContentP.add(button);
        }
    }

    // This timer is used to flash winner label.
    private Timer flashTimer = new Timer(1000, new ActionListener() {
        private boolean red = false;

        @Override
        public void actionPerformed(ActionEvent e) {
            if (winnerIndex == 1) { // player 1 wins
                if (!red) {
                    player1Header.setBackground(Color.RED);
                    player1HeadL.setForeground(Color.WHITE);
                    red = true;
                } else {
                    player1Header.setBackground(Color.WHITE);
                    player1HeadL.setForeground(Color.RED);
                    red = false;
                }
            } else if (winnerIndex == 2) {
                if (!red) {
                    player2Header.setBackground(Color.RED);
                    player2HeadL.setForeground(Color.WHITE);
                    red = true;
                } else {
                    player2Header.setBackground(Color.WHITE);
                    player2HeadL.setForeground(Color.RED);
                    red = false;
                }
            }
        }
    });

    // resect colors of players header panels.   
    private void resetHeaders() {
        player1Header.setBackground(new Color(49, 69, 141));
        player1HeadL.setForeground(Color.WHITE);
        player2Header.setBackground(new Color(49, 69, 141));
        player2HeadL.setForeground(Color.WHITE);
        player1Header.setBorder(BorderFactory.createEmptyBorder());
        player2Header.setBorder(BorderFactory.createEmptyBorder());

    }
    private ArrayList<Card> player1Cards = new ArrayList();
    private ArrayList<Card> player2Cards = new ArrayList();
}
